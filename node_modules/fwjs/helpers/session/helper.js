
var adapter = require('./memory/adapter.js');
var crypto = require('crypto');

var helper = function( context ){
    
    if( context._helpers.session )
        return context._helpers.session;
    else{
        var self = this;
        
        this.ctx = context;
        
        this.cookiename = 'njs_sessid';
    
        this.cookies_helper = this.ctx.app.helperManager.get('cookies',this.ctx);
        
        this.id = this.cookies_helper.get(this.cookiename);

        this.store_adapter = (this.ctx.app.options['session'] && this.ctx.app.options['session']['adapter'])?require(this.ctx.app.options['session']['adapter']):adapter;
        this.store = new this.store_adapter(this.ctx.app);
        
        function buildSession(exist){
            if( !exist ){
                self.id = crypto.createHash('sha1').update(Date.now()+self.context.requestIp()).digest('hex');
                self.cookies_helper.set(self.cookiename,self.id,{httponly:true});
                self.store.create(self.id,{},next);
            }
        }
        
        if( this.id ){ // Session cookie exists
            this.store.exist(this.id, buildSession );
        }else // Session does not exist
            buildSession(false);
        
        context._helpers.session = this;
    }
};

helper.prototype.get = function(name){
    return this.store.getValue(this.id,name);
};
helper.prototype.set = function(name,value,next){
    this.store.setValue(this.id,name,value,next);
};
helper.prototype.destroy = function(next){
    this.store.destroy(this.id,next);
};

module.exports = helper;