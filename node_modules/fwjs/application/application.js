/* 
 * Manage the application process:
 *     - configure the app: 
 *          - set declared modules
 *          - set events routines
 *          - set declared routes
 *          
 *     - handle: Get request & dispatch it to a new context.
 *     - route: Route a context to a controller's action.
 *     - render: Process context view.
 *     - send: Return a context response.
 *     
 * Application events:
 *     - ready: fired after application was successfully configured.
 *     - handle: fired when application get a request.
 *     - routed: fired when request was routed to a controller.
 *     - processed: fired before rendering response.
 *     - rendered: fired after rendering response.
 *     - sent: fired after sending response.
 *     
 */

var context = require('./context.js'),
    controller = require('./controller.js'),
    error = require('./error.js'),
    doafter = require('doafter'),
    path = require('path');
    
var application = function(config){
    
    this.eventStack={};
    
    this._modules = {};
    this._controllers = {};
    this._templates = {};
    this._services = {};
    
    this.__DIR__ = path.dirname(require.main.filename);
    
    if(config){
        if( typeof(config) === 'string' )
            config = require( this.__DIR__+'/'+config );
        this.configure(config);
    }
};

application.controller = controller;
application.context = context;

application.prototype.configure = function(config){
    this.config = config;
    this.setRouteManager(this.config.routes||{});
    this.setModuleManager(this.config.modules||{});
};

application.prototype.setModuleManager = function(modules){
    if( !this.moduleManager )
        this.moduleManager = new (require('../moduleManager/manager.js'))(this);    
    this.moduleManager.configure( modules );
};

application.prototype.setRouteManager = function(routes,options){
    if( !this.routeManager )
        this.routeManager = new (require('../routeManager/manager.js'))(routes,options);
};


/// EVENTS MANAGEMENT \\\

/* Used to bind function on application event.
 * event: 'name of event'
 * datas: { fn: callback to execute, type: 'async|sync|final', priority: number }
 */
application.prototype.on = function(event, fn, type, priority){ 
    if( fn instanceof Function ){
        if( !this.eventStack[event] )
            this.eventStack[event] = {sync:{},async:[],priorities:[],final:undefined};

        type = type||'sync';
        if( type === 'sync' ){
            if( priority ){
                if( this.eventStack[event].sync[priority] ){
                    this.eventStack[event].priorities.push(priority);
                    this.eventStack[event].priorities.sort();
                }
            }else{
                priority = (this.eventStack[event].priorities.length?
                    this.eventStack[event].priorities[this.eventStack[event].priorities.length-1]+1:500);
                this.eventStack[event].priorities.push(priority);
            }
            if( this.eventStack[event].sync[priority] )
                this.eventStack[event].sync[priority].push(fn);
            else
                this.eventStack[event].sync[priority] = [fn];
            
        }else if( type === 'async' ){
            this.eventStack[event].async.push(fn);
        }else if( type === 'final' ){
            this.eventStack[event].final = fn;
        }
    }
    return this;
};

application.prototype.off = function( event, fn){    
    var evts = (event === '*' || !event )?Object.keys(this.eventStack):event.split(',');
    
    if( fn && fn instanceof Function ){
        for( var i=0; i<evts.length; i++){
            if( this.eventStack[evts[i]] ){                
                // Remove function from async event stack.
                var idx = this.eventStack[evts[i]].async.indexOf(fn);
                if( idx > -1 )
                    this.eventStack[evts[i]].async.splice(idx,1);
                
                // Remove function from sync event stack.
                for( var p in this.eventStack[evts[i]].sync ){
                    idx = this.eventStack[evts[i]].sync[p].indexOf(fn);
                    if( idx > -1 )
                        this.eventStack[evts[i]].sync[p].splice(idx,1);
                    if( !this.eventStack[evts[i]].sync[p].length ){
                        this.eventStack[evts[i]].sync[p] = null;
                        this.eventStack[evts[i]].priorities.splice( this.eventStack[evts[i]].priorities.indexOf(p),1 );
                    }
                }
            }
        }
    }else{
        for( var i=0; i<evts.length; i++)
            if( this.eventStack[evts[i]] )
                this.eventStack[evts[i]] = {sync:{},async:[],priorities:[],final:this.eventStack[evts[i]].final};
    }    
    return this;
};

application.prototype.emit = function(event, args){
    if( this.eventStack[event] ){
        for( var i=0; i<this.eventStack[event].async.length; i++)
            this.eventStack[event].async[i]( args );
        
        var final = function(){
            if(this.eventStack[event].final)
                this.eventStack[event].final(args);
        }.bind(this);
        
        if( this.eventStack[event].priorities.length ){
            for( i=0; i<this.eventStack[event].priorities.length; i++ ){
                for( var k=0; k<this.eventStack[event].sync[this.eventStack[event].priorities[i]].length; k++ ){
                    var b = final;
                    final = (function(b,i,k){ return function(){ this.eventStack[event].sync[this.eventStack[event].priorities[i]][k]( b, args); }.bind(this);}).bind(this)(b,i,k);
                }   
            }
        }
        final();
    }
};

/// Default final event functions. \\\
application.prototype.ready = function(){
    // Bind final events for application default events flow.
    this.on('ready',this.handle.bind(this),'final')
        .on('handled',this.route.bind(this),'final')
        .on('routed',this.process.bind(this),'final')
        .on('processed',this.render.bind(this),'final')
        .on('rendered',this.send.bind(this),'final');
    
    // Emit "ready" event.
    this.emit('ready');
};

application.prototype.handle = function(request,response){
    var ctx = new context(this,request,response);
    this.emit('handled',ctx);
};

application.prototype.route = function( ctx ){    
    var routeObject = this.routeManager.resolve( ctx.request.parsedUrl.pathname );
    
    if( routeObject && routeObject.controller && routeObject.action ){        
        var ctrlPath = this.moduleManager.controllers[routeObject.controller];
        if( ctrlPath ){
            
            ctx.controller = new (require(ctrlPath))( ctx );
            ctx.action = routeObject.action;
            
            this.emit('routed',ctx);
        }else{
            // THROW ERROR => CONTROLLER DOES NOT EXISTS
            ctx.response.statusCode = 404;
            ctx.error = new error('Page not found...','NO_CONTROLLER',{reason:'Controller does not exists.'});
            this.emit('error',ctx);
        }
    }
    else{
        // EMIT ERROR. CANNOT FIND A ROUTE MATCHING REQUEST.
        ctx.response.statusCode = 404;
        ctx.error = new error('Page not found...','NO_ROUTE',{reason:'No route matching request.'});
        this.emit('error',ctx);
    }
};

application.prototype.process = function( ctx ){
    if( ctx.controller && ctx.action && ctx.controller[ctx.action] ){
        ctx.controller[ctx.action]( function(){ this.emit('processed',ctx); }.bind(this) );
    }else{
        ctx.response.statusCode = 500;
        ctx.error = new error('Internal Server Error','INTERNAL_ERROR',{reason:'Controller action undefined.'});
        this.emit('error',ctx);
    }
};

application.prototype.render = function( ctx ){
    
    
    
};

application.prototype.send = function( ctx ){
    
};

module.exports = application;