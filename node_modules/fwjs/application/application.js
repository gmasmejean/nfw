/* 
 */
var urlParser = require('url');
var application = function(config){
    this.util = {url:urlParser};
    this.events = ['handle','route','render','send'];
    this.eventStack={handle:[],route:[],render:[]};
    
    if(config){
        if(typeof(config)==='string')
            config = require(config);
        this.configure(config);
    }
};

application.prototype.configure = function(config){
    this.config = config;
    this.setRouteManager(this.config.routes||{});
    this.setModules(this.config.modules||{});
};

application.setRouteManager = function(routes,options){
    if( !this.routeManager )
        this.routeManager = new require('routeManager')(routes,options);
    else
        this.routeManager.setOptions(options).setRoutes(routes);
    this.routeManager.configure();
};

//// EVENT MANAGEMENT \\\\

// Bind actions to do after event was processed. 
// ( For example, all methods bind on 'route' event, will be processed after application execute route mechanism. )
application.prototype.on = function( event,priority,fn ){
    if( this.eventStack[event] && priority ){
        this.eventStack[event].priorities.push(priority);
        this.eventStack[event].priorities.sort();
        this.eventStack[event].functions[priority] = fn;
    }
};

application.prototype.emit = function(event,context){
    if( this.eventStack[event] ){
        var app=this; var callback=function(){ app.next(event,context); };
        for( var i=this.eventStack[event].priorities.length-1; i>0; i--){
            callback = function(){
                this.eventStack[event].functions[this.eventStack[event].priorities[i]](context,callback); };
        }
        callback();
    }
};

application.prototype.next = function(event,context){
    this[this.events[this.events.indexOf(event)+1]](context);
};

// Applications events methods
application.prototype.handle = function(request,response){
    response.fwjs={evtqueue:{},request:request,app:this,url:this.util.url.parse(request.url)};
    this.execute('handle',response);
    
    
    
        
    
    
};

application.prototype.route = function(request,response){
    
    var routeObject = this.routeManager.resolve( request.parsedUrl.pathname );
    if( !routeObject ){
        //Load default config & redirect to 404 page.
        
        
    }else if(routeObject.controller && routeObject.action && this.config.controllers[routeObject.controller] ){
        var ctrl = new require( this.config.controllers[routeObject.controller] )(this,request,response);
        ctrl[routeObject.action]();
    }
    
    
    
};

application.prototype.render = function(){
    
};

application.prototype.send = function(){
    
};




module.exports = application;
