/* 
 * Event Manager.
 * Load event configuration.
 */
var util = require('../utilities/utilities.js');

var manager = function( application ){
    this.app = application;
    this.events = {}; 
};

manager.prototype.configure = function( events, next ){
    
};

manager.prototype.load = function( path, next){

};


manager.prototype.on = function( event, fn, type, priority ){
    if( fn instanceof Function ){
        if( !this.eventStack[event] )
            this.eventStack[event] = {sync:{},async:[],priorities:[],final:undefined};

        type = type||'sync';
        if( type === 'sync' ){
            if( priority ){
                if( this.eventStack[event].sync[priority] ){
                    this.eventStack[event].priorities.push(priority);
                    this.eventStack[event].priorities.sort();
                }
            }else{
                priority = (this.eventStack[event].priorities.length?
                    this.eventStack[event].priorities[this.eventStack[event].priorities.length-1]+1:500);
                this.eventStack[event].priorities.push(priority);
            }
            if( this.eventStack[event].sync[priority] )
                this.eventStack[event].sync[priority].push(fn);
            else
                this.eventStack[event].sync[priority] = [fn];
            
        }else if( type === 'async' ){
            this.eventStack[event].async.push(fn);
        }else if( type === 'final' ){
            this.eventStack[event].final = fn;
        }
    }
    return this;
};

manager.prototype.off = function( event, fn ){
    var evts = (event === '*' || !event )?Object.keys(this.eventStack):event.split(',');
    
    if( fn && fn instanceof Function ){
        for( var i=0; i<evts.length; i++){
            if( this.eventStack[evts[i]] ){                
                // Remove function from async event stack.
                var idx = this.eventStack[evts[i]].async.indexOf(fn);
                if( idx > -1 )
                    this.eventStack[evts[i]].async.splice(idx,1);
                
                // Remove function from sync event stack.
                for( var p in this.eventStack[evts[i]].sync ){
                    idx = this.eventStack[evts[i]].sync[p].indexOf(fn);
                    if( idx > -1 )
                        this.eventStack[evts[i]].sync[p].splice(idx,1);
                    if( !this.eventStack[evts[i]].sync[p].length ){
                        this.eventStack[evts[i]].sync[p] = null;
                        this.eventStack[evts[i]].priorities.splice( this.eventStack[evts[i]].priorities.indexOf(p),1 );
                    }
                }
            }
        }
    }else{
        for( var i=0; i<evts.length; i++)
            if( this.eventStack[evts[i]] )
                this.eventStack[evts[i]] = {sync:{},async:[],priorities:[],final:this.eventStack[evts[i]].final};
    }    
    return this;
};

manager.prototype.emit = function(event, args){
    if( this.eventStack[event] ){
        for( var i=0; i<this.eventStack[event].async.length; i++)
            this.eventStack[event].async[i]( args );
        
        var final = function(){
            if(this.eventStack[event].final)
                this.eventStack[event].final(args);
        }.bind(this);
        
        if( this.eventStack[event].priorities.length ){
            for( i=0; i<this.eventStack[event].priorities.length; i++ ){
                for( var k=0; k<this.eventStack[event].sync[this.eventStack[event].priorities[i]].length; k++ ){
                    var b = final;
                    final = (function(b,i,k){ return function(){ this.eventStack[event].sync[this.eventStack[event].priorities[i]][k]( b, args); }.bind(this);}).bind(this)(b,i,k);
                }   
            }
        }
        final();
    }
};


module.exports = manager;