/* 
 * Route Manager.
 * Build routes configuration / Route request.
 * 
 * Routes configuration example:
 * var routes = {
 *      nameRouteA:{
 *          type:'literal',
 *          route:'literal/path',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall'
 *      },
 *      nameRouteB:{
 *          type:'segment',
 *          route:'segment/[:dynamicParam]/path',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall',
 *          constraints:{
 *              dynamicParam:'\\w\*' // Have to match with given Regex.
 *          }
 *      },
 *      nameRouteC:{
 *          type:'section',
 *          route:'section/common/',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall',
 *          childs:{
 *              nameChildRoute:{
 *                  type:'literal',
 *                  route:'add',
 *                  controller:'nameOfCalledModule',
 *                  action:'moduleActionToCall'
 *              },
 *              nameChildRouteB:{
 *                  type:'segment',
 *                  route:'get/[:element]',
 *                  controller:'nameOfCalledModule',
 *                  action:'moduleActionToCall'
 *              },
 *          }
 *      }
 *  }
 */

var manager = function( routes, routers ){
    this.routes={};
    this.routers={};
    this.compiledRoutes={};
    
    // Initialize routers
    for( var model in this.routerModels )
        this.routers[model] = new (this.routerModels[model])(this);
    
    // Add routers to predefined set.
    if( routers instanceof Object ){
        for( var name in routers )
            this.addRouter( name, routers[name]);
    }
    
    // Set routes.
    this.addRoutes( routes );
};

manager.prototype.routerModels = {
    literal: require('./literal.js'),
    section: require('./section.js'),
    segment: require('./segment.js')
};

manager.prototype.addRouter = function( name, router ){
    if( !this.routers[name] ){
        if( typeof(router) === 'string' )
            router = require(router);
        
        this.routerModels[name] = router;
        this.routers[name] = new router(this);
    }else
        throw new Error('Router name already exists');
};

manager.prototype.addRoutes = function( routes ){
    if( routes instanceof Object ){
        for( var name in routes )
            this.addRoute( name, routes[name]);
    }
};

manager.prototype.addRoute = function(name, route){
    if( !this.routes[name] ){
        this.routes[name] = route;
        
        console.log( route, name, this.routers);
        
        if( this.routers[route.type] )
            this.routers[route.type].compile( route, name );
        else
            throw new Error('Router does not exist');
    }else
        throw new Error('Route already exists');
};

/*
 * Resolve routage from a request. Return false if route does not exist or an object like:
 *  { controller:'controller',name:'routeName',action:'controllerAction',params:{ "here=>Request parameters" }}
 */
manager.prototype.resolve = function(route){
    var routeObject = false;
    for( var router in this.routers ){
        routeObject = this.routers[router].match(route);
        if( routeObject )
            return routeObject;
    }
    return routeObject;
};

/*
 * Generate an url string from routeName & given parameters.
 * /!\ Does not verify that parameters match route constraints !
 */
manager.prototype.url = function(routeName,parameters){
    for( var router in this.routers ){
        var url = this.routers[router].url(routeName,parameters);
        if( url )
            return url;
    }
};

module.exports = manager;