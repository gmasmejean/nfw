/* 
 * Route Manager.
 * Build routes configuration / Route request.
 * 
 * Routes configuration example:
 * var routes = {
 *      nameRouteA:{
 *          type:'literal',
 *          route:'literal/path',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall'
 *      },
 *      nameRouteB:{
 *          type:'segment',
 *          route:'segment/[:dynamicParam]/path',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall',
 *          constraints:{
 *              dynamicParam:'\\w\*' // Have to match with given Regex.
 *          }
 *      },
 *      nameRouteC:{
 *          type:'section',
 *          route:'section/common/',
 *          controller:'nameOfCalledModule',
 *          action:'moduleActionToCall',
 *          childs:{
 *              nameChildRoute:{
 *                  type:'literal',
 *                  route:'add',
 *                  controller:'nameOfCalledModule',
 *                  action:'moduleActionToCall'
 *              },
 *              nameChildRouteB:{
 *                  type:'segment',
 *                  route:'get/[:element]',
 *                  controller:'nameOfCalledModule',
 *                  action:'moduleActionToCall'
 *              },
 *          }
 *      }
 *  }
 */

var routeManager = function( routes, options ){
    this.routes={};
    this.routers={};
    this.compiledRoutes={};
    this.options = {types:{literal:'./literal.js',section:'./section.js',segment:'./segment.js'/*Route type name: route type path*/}};
    
    if( routes )
        this.setRoutes(routes);
    if( options )
        this.setOptions(options);
};


routeManager.prototype.addRoutes = function(routes){
    if( routes instanceof Object ){
        for( var route in routes )
            this.routes[route] = routes[route];
    }
    return this;
};

routeManager.prototype.setRoutes = function(routes){
    this.routes=routes;
    return this;
};
routeManager.prototype.setOptions = function(options){
    if( options instanceof Object ){
        var keys = Object.keys(options);
        for( var key in keys )
            this.options[key] = options[key];
    }
    return this;
};

routeManager.prototype.configure = function(){
    // Initialize routers objects.
    if( this.options.types )
        for( var type in this.options.types )
            if(!this.routers[type])
                this.routers[type] = new (require(this.options.types[type]))(this);
    // Generate compiled routes.
    for( var route in this.routes )
        this.routers[this.routes[route].type].compile(this.routes[route],route);
    return this;
};

/*
 * Resolve routage from a request. Return false if route does not exist or an object like:
 *  { controller:'controller',name:'routeName',action:'controllerAction',params:{ "here=>Request parameters" }}
 */
routeManager.prototype.resolve = function(route){
    var routeObject = false;
    for( var router in this.routers ){
        routeObject = this.routers[router].match(route);
        if( routeObject )
            return routeObject;
    }
    return routeObject;
};

/*
 * Generate an url string from routeName & given parameters.
 * /!\ Does not verify that parameters match route constraints !
 */
routeManager.prototype.url = function(routeName,parameters){
    for( var router in this.routers ){
        var url = this.routers[router].url(routeName,parameters);
        if( url )
            return url;
    }
};

module.exports = routeManager;