/* 
 * Module Manager.
 * Build routes configuration / Route request.
 */

var jhtml = require('jhtml');
var moduleManager = function( application ){
    this.app = application;
    this.controllers = {};
    this.plugins = {};
    this.templates = {};    
};

moduleManager.prototype.configure = function(config){
    this.config = config;
    if( this.config.module instanceof Object ){
        for( var module in this.config.module )
            this.loadModule(require(this.config.module[module]));
    }
};

moduleManager.prototype.loadModule = function(mConfig){
    if( mConfig.controllers )
        for( var controller in mConfig.controllers )
            this.controllers[controller] =  mConfig.controllers[controller];
    if( mConfig.plugins )
        for( var plugin in mConfig.plugins )
            this.plugins[plugin] =  mConfig.plugins[plugin];
    
    if( mConfig.templates ){
        var self=this;
        jhtml.createAll(mConfig.templates,function(templates){ 
            for( var tpl in templates ) self.templates[tpl]=templates[tpl]; });
    }
    
    if( mConfig.events ){
        for( var event in mConfig.events ){
            for( var i=0; i<mConfig.events[event].length; i++)
                this.app.on(event,mConfig[event][i].priority,mConfig[event][i].fn );
        }
    }
};

moduleManager.prototype.getController = function(controller){
    if( this.controllers[controller] ){
        if( typeof(this.controllers[controller]) === 'string' )
            this.controllers[controller] = require(this.controllers[controller]);
        return this.controllers[controller];
    }else
        throw new Error('module or controller does not exist.');
};

moduleManager.prototype.getPlugin = function(module,plugin){
    if( this.modules[module] && this.modules[module][plugin] ){
        if( typeof(this.modules[module][plugin]) === 'string' )
            this.modules[module][plugin] = new require(this.modules[module][plugin])(this.app);
        return this.modules[module][plugin];
    }else
        throw new Error('module or plugin does not exist.');
};

moduleManager.prototype.getTpl = function(tplName){
    if( this.templates && this.templates[tplName] ){
        if( typeof(this.templates[tplName]) === 'string' )
            this.templates[tplName] = require(this.templates[tplName]);
        return new this.templates[tplName](this.app);
    }else
        throw new Error('template does not exist.');
};

module.exports = moduleManager;