/* 
 * Module Manager.
 * Build routes configuration / Route request.
 */

var jhtml = require('jhtml'),
    doafter = require('doafter'),
    configKeyWords = ['controllers','routes','templates','events','plugins'];


var manager = function( application ){
    this.app = application;
    this.modules = {};
    this.controllers = {};
    this.templates = {};    
};

manager.prototype.configure = function( modules ){ console.log( modules);
    if( modules instanceof Object ){
        for( var name in modules )
            this.load( name, this.app.__DIR__+'/'+modules[name]+'/', this.app.ready.bind(this.app) );
    }
};

manager.prototype.load = function( name, path, callback ){
    console.log( callback );
    
    if( !this.modules[name] ){
        var config = require( path + 'module.conf.js'),
            mgr = this;
    
        if( config ){
            
            this.modules[name] = {
                path:path,
                config:config
            };
        
            // configure controllers.
            if( config.controllers ){
                for( var cname in  config.controllers )
                    this.controllers[cname] = path+config.controllers[cname];
            }
            
            // configure service
            if( config.services ){
                for( var sname in  config.services )
                    this.services[sname] = path+config.services[sname];    
            }
            
            // configure routes.
            if( config.routes )
                this.app.routeManager.addRoutes(config.routes);
            
            // configure events
            if( config.events){
                for( var i=0; i<config.events.length; i++ )
                    this.app.on( config.events[i].event, config.events[i].fn.bind(this.app), config.events[i].type, config.events[i].priority );
            }
            
            // configure & build templates.
            if( config.templates ){
                for( var tname in config.templates ){
                    var template_path = path+config.templates[tname];
                    var fn = function(cb){
                        jhtml.createTemplate(template_path,false,function(err){
                            if( !err ){
                                mgr.templates[tname] = template_path;
                                cb();
                            }else
                                mgr.app.emit('error', err);
                        });
                    };                    
                    doafter( fn, callback );
                }                
            }            
            doafter(null, callback );    
        }
    }else
        this.app.emit('error', new Error('module with this name already declared') );
};






/*
moduleManager.prototype.load = function( module, config){
    for( var key in config ){
        if( configKeyWords.indexOf(key)>0 )
            this['load'+key.charAt(0).toUpperCase()+key.slice(1)]( module, config[key] );
        else
            this.app.config[key] = config[key];
    }
};

moduleManager.prototype.loadControllers = function( module, config){
    console.log( module, config );
    
};

moduleManager.prototype.loadPlugins = function( module, config){
    
};

moduleManager.prototype.loadTemplates = function( module, config){
    
};

moduleManager.prototype.loadRoutes = function( module, config){
    
};

moduleManager.prototype.loadEvents = function( module, config){
    
};
*/




















var moduleManager = function(){};


moduleManager.prototype.configure = function( modules ){
    if( modules instanceof Object ){
        for( var module in modules )
            this.load( this.app.src_path + '/' + require( modules[module] + '/' + 'module.conf.js' ) );
    }
};

moduleManager.prototype.load = function(mConfig){
    if( mConfig.controllers )
        for( var controller in mConfig.controllers )
            this.controllers[controller] =  mConfig.controllers[controller];
    if( mConfig.plugins )
        for( var plugin in mConfig.plugins )
            this.plugins[plugin] =  mConfig.plugins[plugin];
    
    if( mConfig.templates ){
        var self=this;
        jhtml.createAll(mConfig.templates,function(templates){ 
            for( var tpl in templates ) self.templates[tpl]=templates[tpl]; });
    }
    
    if( mConfig.events ){
        for( var event in mConfig.events ){
            for( var i=0; i<mConfig.events[event].length; i++)
                this.app.on(event,mConfig[event][i].priority,mConfig[event][i].fn );
        }
    }
};

moduleManager.prototype.getController = function(controller){
    if( this.controllers[controller] ){
        if( typeof(this.controllers[controller]) === 'string' )
            this.controllers[controller] = require(this.controllers[controller]);
        return this.controllers[controller];
    }else
        throw new Error('module or controller does not exist.');
};

moduleManager.prototype.getPlugin = function(module,plugin){
    if( this.modules[module] && this.modules[module][plugin] ){
        if( typeof(this.modules[module][plugin]) === 'string' )
            this.modules[module][plugin] = new (require(this.modules[module][plugin]))(this.app);
        return this.modules[module][plugin];
    }else
        throw new Error('module or plugin does not exist.');
};

moduleManager.prototype.getTpl = function(tplName){
    if( this.templates && this.templates[tplName] ){
        if( typeof(this.templates[tplName]) === 'string' )
            this.templates[tplName] = require(this.templates[tplName]);
        return new this.templates[tplName](this.app);
    }else
        throw new Error('template does not exist.');
};

module.exports = manager;