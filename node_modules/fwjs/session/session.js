
var cookies = require('cookies');
var crypto = require('crypto');

var session = function(context, store, next){
    var self = this;
    this.context = context;
    this.context.session = this;
    this.cookies = new cookies(context);
    this.id = this.cookies.get( this.cookiename );
    
    function buildSession(exist){
        if( !exist ){
            self.id = self.generateId();
            self.cookies.set(self.cookiename,self.id,{httponly:true});
            self.store.create(self.id,{},next);
        }else
            self.store.get(self.id,next);
    }
    
    this.store = store||new memoryStore(context.app);
    if( this.id ){ // Session cookie exists
        store.exist(this.id, buildSession );
    }else // Session does not exist
        buildSession(false);
};

session.prototype.cookiename = 'njs_sessid';
session.prototype.generateId = function(){
    return crypto.createHash('sha1').update(Date.now()+this.context.requestIp()).digest('hex');
};

session.prototype.get = function(name){
    return this.store.getValue(this.id,name);
};
session.prototype.set = function(name,value,next){
    this.store.setValue(this.id,name,value,next);
};
session.prototype.destroy = function(next){
    this.cookies.set(this.cookiename,'',{httponly:true,expires: new Date(Date.now()-3600).toUTCSting()});
    var id=this.id; this.id=null;
    this.store.destroy(id,next());
};

// Not use this for production !
var memoryStore = function(application){
    this.app = application;
    if( !this.app._memorystore )
        this.app._memorystore = {};
};

memoryStore.prototype.exist = function( key, next ){
    next( this.app._memorystore[key]?true:false );
};

memoryStore.prototype.get = function( key, next ){
    next(true);
};

memoryStore.prototype.create = function( key, data, next){
    this.app._memorystore[key] = data;
    next(true);
};

memoryStore.prototype.destroy = function( key, next ){
    delete(this.app._memorystore[key]);
    next(true);
};

memoryStore.prototype.setValue = function( key, vname, value, next){
    this.app._memorystore[key][vname] = value;
    next(true);
};

memoryStore.prototype.getValue = function( key, vname ){
    return this.app._memorystore[key][vname];
};

module.exports = session;