/* 
 * Function to launch multiple async functions & passe the result to a given callback.
 * todo => Array of functions, parameters & context to execute
 *       todo = [ [ FunctionOne, FunctionOneParams, FunctionOneContext ], ... ]
 *       
 *       // FunctionOneParams = [p1,p2];
 *       // FunctionOne = function( p1, p2, next ){ 
 *       //     this === FunctionOneContext     
 *       //     next is a given callback you must call. 
 *       //     next arguments will be passed in final callback arguments.
 *       // }
 *       
 * callback => Given function called when all "todo" functions are done. 
 *       callback function must be waiting for an array containing results of todo functions.
 *       callback = function( results ){ }
 *       // results = [ FunctionOneReturn, ... ];
 * 
 * builder => Optionnal. Use to build results parameter for final callback.
 *       builder = function( results, n, FunctionNOutputParams ){
 *            // results => reference to results parameter which will be given to final callback.
 *            // n => index of todo Function that just ended.
 *            // FunctionNOutputParams => Array of parameters passed to next function by todo FunctionN
 *       }
 * 
 */

module.exports = function( todo, callback, builder ){    
    if( Array.isArray(todo) ){
        var length = todo.length;
            results = Array(length),
            done = 0,
            i = 0,
            next = function( n ){
                done++;
                if( builder )
                    builder( results, n, Array.prototype.slice.call(arguments,1) );
                else
                    results[n] = Array.prototype.slice.call(arguments,1);
                
                if( done === length)
                    callback(results);
            };
        
        for( ; i<length; i++ )            
            todo[i][0].apply(todo[i][2],(todo[i][1]||[]).concat(next.bind(null,i)));
    }
};